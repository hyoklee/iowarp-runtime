template<typename ...Args>
HSHM_CROSS_FUN
hipc::FullPtr<CUSTOM##Task> Async##CUSTOM##Alloc(const hipc::MemContext &mctx,
                                                 const TaskNode &task_node,
                                                 const DomainQuery &dom_query,
                                                 Args&& ...args) {
  hipc::FullPtr<CUSTOM##Task> task =
  CHI_CLIENT->NewTask<CUSTOM##Task>(mctx, task_node, id_, dom_query, std::forward<Args>(args)...);
  return task;
}

template<typename ...Args>
HSHM_CROSS_FUN
hipc::FullPtr<CUSTOM##Task> Async##CUSTOM(const hipc::MemContext &mctx,
                                           Args&& ...args) {
  chi::Task *parent_task = CHI_CUR_TASK;
  if (parent_task) {
    return Async##CUSTOM##Base(mctx, parent_task,
                               parent_task->task_node_ + 1,
                               std::forward<Args>(args)...);
  } else {
    return Async##CUSTOM##Base(mctx, nullptr,
                               CHI_CLIENT->MakeTaskNodeId(),
                               std::forward<Args>(args)...);
  }
}

template<typename ...Args>
hipc::FullPtr<CUSTOM##Task> Async##CUSTOM##Base(
  const hipc::MemContext &mctx,
  Task *parent_task,
  const TaskNode &task_node,
  Args&& ...args) {
  hipc::FullPtr<CUSTOM##Task> task = Async##CUSTOM##Alloc(
    mctx, task_node, std::forward<Args>(args)...);
  CHI_CLIENT->ScheduleTaskRuntime(parent_task, task, task->pool_);
  return task;
}